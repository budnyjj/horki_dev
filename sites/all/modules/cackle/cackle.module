<?php
/**
 * @file
 * Cackle social comments.
 */

/**
 * Implements hook_help().
 */
function cackle_help($path, $arg) {
  switch ($path) {
    case "admin/help#cackle":
      return '<div><h1>' . t("Installation") . '</h1><p>' . t("1. Upload  folder `cackle` to the `drupal->sites->all-modules` directory") . '</p>' . '<p>' . t("2. Enable Cackle in drupal's admin") . '</p>' . '<p>' . t("3. Register your site at <a href='http://cackle.me'>cackle.me</a>") . '</p>' . '<p>' . t("4. Enter siteId and api Keys in Configuration/Web services/Cackle comments confuguration from cackle.me") . '</p>' . t("5. Select 'Content' region for Cackle in drupal's admin (Structure=>Blocks)") . '</p>' . '<p>' . t("6. In Cofiguration => Performance => Clear all caches") . '</p>';
  }
}

/**
 * Implements hook_block_info().
 */
function cackle_block_info() {
  // The name that will appear in the block list.
  $blocks['cackle'] = array('info' => t('Cackle'), 'cache' => DRUPAL_CACHE_PER_ROLE);
  return $blocks;
}

/**
 * Loading external lib and starting comments sync.
 */
function cackle_in() {
  $a = new Cackle();
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nodeid = arg(1);
  // Check cURL for the ability to load comments from Cackle server to local db.
    $has_curl = function_exists('curl_init');
    if ($has_curl) {
      $obj = $a->getLocalComments($nodeid);
    }
    else {
      $obj = NULL;
    }
    $template = theme('cackle_custompage_template', array(
        'obj' => $obj,
        'nodeid' => $nodeid,
        'has_curl' => $has_curl)
    );
    return $template;
  }
}

/**
 * Theme_hook to render template.
 */
function cackle_theme() {
  return array(
    'cackle_custompage_template' => array(
      'template' => 'cackle_template',
      'arguments' => array(
        'obj' => NULL,
        'nodeid' => NULL),
    ),
  );
}

/**
 * Preparing the block contents.
 */
function cackle_block_view($delta = '') {
  drupal_add_js(drupal_get_path('module', 'cackle') . '/cackle.js',
      array(
        'scope' => 'footer',
      )
  );
  switch ($delta) {
    case 'cackle':
      $mc_site = variable_get('cackle_mc_site', 1);
      $nid = arg(1);
      $node = node_load($nid);
      $node_type = '';
      $cackle_types = variable_get('cackle_nodetypes', array());
      if (node_type_get_type($node)) {
        $node_type = $node->type;
      }
      if (!empty($cackle_types[$node_type])) {
        $template = cackle_in();
        $block['content'] = $template;
        return $block;
      }
  }
}

/**
 * Adding counter's link #mc-container for the node.
 */
function cackle_node_view($node, $view_mode) {
  drupal_add_js(array(
      'cackle' => array(
        'cackle_mc_site' => variable_get('cackle_mc_site', NULL),
        'node_id' => $node->nid,
      ),
  ),
  'setting');
  drupal_add_js(drupal_get_path('module', 'cackle') . '/counter.js',
    array(
      'scope' => 'footer',
    )
  );
  switch ($view_mode) {
    case 'teaser':
      $links['cackle_comments_num'] = array(
        'title' => t('Comments'),
        'href' => 'node/' . $node->nid,
        'fragment' => 'mc-container',
        'attributes' => array(
          'cackle-channel' => $node->nid,
        ),
      );
      $node->content['links']['cackle'] = array(
        '#theme' => 'links',
        '#links' => $links,
        '#attributes' => array(
          'class' => array('links', 'inline'),
        ),
      );
      break;
  }
}

/**
 * Implements hook_menu().
 */
function cackle_menu() {
  $items = array();

  $items['admin/config/services/cackle'] = array(
    'title' => 'Cackle comments configuration',
    'description' => 'Configuration for Cackle module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cackle_admin_settings'),
    'access arguments' => array('administer cackle settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cackle.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function cackle_permission() {
  return array(
    'administer cackle settings' => array(
      'title' => t('Administer Cackle settings'),
      'description' => t('Change the settings for the Cackle module.'),
      'restrict access' => TRUE,
    ),
  );
}
