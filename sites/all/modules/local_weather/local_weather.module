<?php 
  /**
   * Implements hook_help.
   *
   * Displays help and module information.
   *
   * @param path 
   *   Which path of the site we're using to display help
   * @param arg
   *   Array that holds the current path as returned from arg() function
   */
function local_weather_help($path, $arg) {
  switch ($path) {
  case "admin/help#local_weather":
    return '<p>'.t("Displays local weather").'</p>';
    break;
  }
}

/** 
 * Implements hook_block_info().
 */
function local_weather_block_info() {
  $blocks['local_weather'] = 
    array('info' => t('Local weather'), 'cache' => DRUPAL_CACHE_PER_ROLE);
  return $blocks;
}

/**
 * Custom parser function
 */
function local_weather_get_forecast($place) { 
  if (!($library = libraries_load('forecast.io-php-api')) || empty($library['loaded'])) {
    return 'Can not load library';
  }

  $api_key = variable_get('forecastio_api_key', '');
  if ($api_key == '') {
    return 'Please, set ForecastIO key';
  }

  $forecast = new ForecastIO($api_key);

  /* Get weather for today */
  $conditions = $forecast->getForecastDay($place[0], $place[1], strtotime('today'));
  if (!$conditions) {
    return 'Can not obtain forecast';
  }

  /* Get local weather for 04:00 (night) */
  $result = local_weather_format_conditions($conditions[4], false);

  /* Get local weather for 14:00 (day) */
  $result .= local_weather_format_conditions($conditions[14], true);

  return $result;
}

function local_weather_format_conditions($conditions, $withDelimiter) {
  $delimiter = '<span class="delimiter">|</span>';

  $iconFmt = local_weather_format_icon($conditions->getIcon());

  $tempMax = round($conditions->getTemperature()) + 1;
  $tempMin = $tempMax - 2;

  $tempFmt = '<span class="temperature">';
  $tempFmt .= $tempMin . '..' . $tempMax . '&deg;C';
  $tempFmt .= '</span>';
    	
  $result = '';
  if ($withDelimiter) {
    $result .= $delimiter;
  }
  $result .= $iconFmt . $tempFmt;

  return $result;
}

function local_weather_format_icon($icon_value) {
  $icon_class = '';

  switch ($icon_value) {
  case 'clear-day':
  case 'clear-night':
  case 'fog':
  case 'cloudy':
  case 'partly-cloudy-day':
  case 'partly-cloudy-night':
    $icon_class .= $icon_value;
    break;
  case 'rain':
  case 'sleet':
    $icon_class .= 'rain';
    break;
  default:
    $icon_class .= 'partly-cloudy-day';
  }

  return '<span class="icon ' . $icon_class . '"></span>';
}

/**
 * Obtains data for local weather block from cache or ForecastIO API 
 */
function local_weather_block_view($delta = '') {
  switch($delta){
  case 'local_weather':
    $block['subject'] = t('Weather');
    if (user_access('access content')){  
      $cache = cache_get('local_weather_info', 'cache');
      if ($cache) {
      	$result = $cache->data;
      } else {
	/* Horki coordinates */
	$place = array('54.2833', '30.9833');

	/* Use our function for getting result */
	$result = local_weather_get_forecast($place); 
	cache_set('local_weather_info', $result, 'cache', 43200);
      }
      $block['content'] = '<a href="/weather.html">';
      if (empty($result)) {
	$block['content'] .= t('no data');
      } else {
	$block['content'] .= $result;
      }
      $block['content'] .= '</a>';
    }
  }
  return $block;
}
