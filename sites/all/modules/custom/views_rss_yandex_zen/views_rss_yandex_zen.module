<?php

/**
 * @file
 * Provides Yandex.Zen <item> elements for Views RSS module.
 */

/**
 * Implements hook_views_rss_item_elements().
 */
function views_rss_yandex_zen_views_rss_item_elements() {
  $elements['zen:enclosure'] = array(
    'description' => t('The node content to extract enclosures from.'),
    'help' => 'https://yandex.ru/support/zen/website/rss-modify.html',
    'preprocess functions' => array('views_rss_yandex_zen_preprocess_item_zen_enclosure'),
  );
  $elements['zen:content:encoded'] = array(
    'description' => t('The node content to extract enclosures from.'),
    'help' => 'https://yandex.ru/support/zen/website/rss-modify.html',
    'preprocess functions' => array('views_rss_yandex_zen_preprocess_item_zen_content_encoded'),
  );

  return $elements;
}

/**
 * Preprocess function for item <enclosure> element.
 */
function views_rss_yandex_zen_preprocess_item_zen_enclosure(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  // Process content
  $html = new simple_html_dom();
  $html->load($variables['elements'][0]['value']);
  // Extract image data from content
  $imgs = $html->find('img');
  if (empty($imgs)) {
    $variables['elements'][0]['value'] = NULL;
    return;
  }
  foreach ($imgs as $idx => $img) {
    $img_url = NULL;
    // Locate image URL
    if (isset($img->src)) {
      $img_url = $img->srcset;
    } else if (isset($img->srcset)) {
      $img_url = $img->srcset;
    } else {
      continue;
    }
    $variables['elements'][$idx]['key'] = 'enclosure';
    $variables['elements'][$idx]['attributes']['url'] = $img_url;
    $variables['elements'][$idx]['attributes']['type'] = 'image/jpeg';
    $variables['elements'][$idx]['value'] = NULL;
  }
}

function views_rss_yandex_zen_preprocess_item_zen_content_encoded(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  // Process content
  $html = new simple_html_dom();
  $html->load($variables['elements'][0]['value']);
  // Process images
  foreach ($html->find('img') as $img) {
    $img->alt = NULL;
    $img->removeAttribute('data-picture-mapping');
    // Replace src with srcset, if not set
    if (isset($img->srcset) && !isset($img->src)) {
      $img->src = $img->srcset;
    }
    $img->srcset = NULL;
    if (isset($img->title)) {
      $title = $img->title;
      $img->title = NULL;
      $img->outertext = $img->outertext . '<figcaption>' . $title . '</figcaption>';
    }
    $img->outertext = '<figure>' . $img->outertext . '</figure>';
  }
  // Remove all unneeded attributes
  foreach ($html->find('[id]') as $e) {
    $e->id = NULL;
  }
  foreach ($html->find('[class]') as $e) {
    $e->class = NULL;
  }
  foreach ($html->find('[style]') as $e) {
    $e->style = NULL;
  }

  $processed_value = $html->save();

  $variables['elements'][0]['key'] = 'content:encoded';
  $variables['elements'][0]['value'] = '<![CDATA[' . $processed_value . ']]>';
  $variables['elements'][0]['encoded'] = TRUE;
}