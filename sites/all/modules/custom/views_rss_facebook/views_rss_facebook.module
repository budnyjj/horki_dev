<?php

/**
 * @file
 * Provides Facebook <item> elements for Views RSS module.
 */

/**
 * Implements hook_views_rss_item_elements().
 */
function views_rss_facebook_views_rss_item_elements() {
  $elements['facebook:content:encoded'] = array(
    'description' => t('Encoded item synopsis.'),
    'help' => 'https://developers.facebook.com/docs/instant-articles/publishing/setup-rss-feed/',
    'preprocess functions' => array(
      /* 'views_rss_facebook_preprocess_item_content_encoded_slideshow', */
      'views_rss_facebook_preprocess_item_content_encoded',
      'views_rss_custom_rewrite_absolute_paths',
      'views_rss_custom_encode',
    ),
  );
  $elements['facebook:author'] = array(
    'key' => 'author',
    'description' => t('An HTML with h3 class="text-signature" element to extract the author name from.'),
    'preprocess functions' => array('views_rss_facebook_preprocess_item_custom_author'),
  );
  return $elements;
}

/**
 * Preprocess function for item <content:encoded> element with the big number of images.
 */
function views_rss_facebook_preprocess_item_content_encoded_slideshow(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  // Process content
  $html = new simple_html_dom();
  $html->load($variables['elements'][0]['value']);

  // Check, if there are enough images to form a gallery
  $min_img_num = 9;
  $imgs = $html->find('p img');
  $img_num = count($imgs);
  if ($img_num < $min_img_num) {
    return;
  }

  $first_gallery_img_idx = 0;
  $last_gallery_img_idx = 0;

  $first_img_idx = 0;
  while ($first_img_idx < $img_num) {
    $first_p = $imgs[$first_img_idx]->parent;
    if (sizeof($first_p->children) != 1) {      
      // skip if <img> is not the only child of <p>
      $first_img_idx++;
      continue;
    }
    
    $last_p = $first_p;
    $p_offset = 0;
    while (true) {
      $last_p_sibling = $last_p->next_sibling();

      if (!isset($last_p_sibling) || $last_p_sibling->tag != 'p') {
	// skip if the sibling tag is not <p>
	break;
      }
      $last_p_sibling_children = $last_p_sibling->children;
      if (sizeof($last_p_sibling_children) != 1) {
	// skip if there are more than one children of sibling <p>
	break;
      }
      if ($last_p_sibling_children[0]->tag != 'img') {
	// skip if <img> is not the only child of sibling <p>
	break;
      }

      $last_p = $last_p_sibling;
      $p_offset++;
    }

    if ($p_offset < $min_img_num) {
      // skip if there are less than $min_img_num neghbour <p><img> tags
      $first_img_idx += $p_offset + 1;
      continue;
    }
    
    for ($p_idx = 1, $p = $first_p->next_sibling(); $p_idx < $p_offset; $p_idx++, $p = $p->next_sibling()) {
      $p->outertext = $p->innertext;
    }
    $first_p->outertext = '<section class="type:slideshow">' . $first_p->innertext;
    $last_p->outertext = $last_p->innertext . '</section>';

    $first_img_idx += $p_offset + 1;
  }

  $processed_value = $html->save();
  $variables['elements'][0]['value'] = $processed_value;
}

/**
 * Preprocess function for item <content:encoded> element.
 */
function views_rss_facebook_preprocess_item_content_encoded(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  // Process content
  $html = new simple_html_dom();
  $html->load($variables['elements'][0]['value']);
  // Process images
  foreach ($html->find('img') as $idx => $img) {
    $img->width = NULL;
    $img->height = NULL;
    $img->alt = NULL;
    $img->class = NULL;
    $img->style = NULL;
    $img->removeAttribute('data-picture-mapping');
    $img->removeAttribute('data-aspectratio');
    // Replace src with data-srcset, if not set
    if ($img->hasAttribute('data-srcset') != null && !isset($img->src)) {
      $img->src = explode(' ', $img->getAttribute('data-srcset'), 2)[0];
      $img->removeAttribute('data-srcset');
    }
    // Replace src with srcset, if not set
    if (isset($img->srcset) && !isset($img->src)) {
      $img->src = explode(' ', $img->srcset, 2)[0];
      $img->srcset = NULL;
    }
    // Drop ?itok=... suffix from src
    $img_src_itok_pos = strrpos($img->src, '?itok=');
    if ($img_src_itok_pos) {
      $img->src = substr($img->src, 0, $img_src_itok_pos);
    }
    // Fixup title
    if (isset($img->title)) {
      $title = $img->title;
      $img->title = NULL;
      if (!empty($title)) {
    	$img->outertext = '<figure>' . $img->outertext . '<figcaption>' . $title . '</figcaption>' . '</figure>';
      }
    }
    // Remove wrapping <p> tag
    $img_parent = $img->parent;
    if ($img_parent->tag == 'p') {
      $img_parent->outertext = $img->outertext;
    }
  }
  // Process iframes
  foreach ($html->find('iframe') as $idx => $iframe) {
    $iframe->width = 560;
    $iframe->height = 315;
    // remove url parameters from src
    $iframe->src = strtok($iframe->src, '?');
    $iframe->removeAttribute('allowfullscreen');
  }
  // Remove author signature
  $author = $html->find('h3[class=text-signature]', -1);
  if (isset($author)) {
    $author->outertext = '';
  }
  // Remove all unneeded attributes
  foreach ($html->find('[id]') as $e) {
    $e->id = NULL;
  }
  foreach ($html->find('[class]') as $e) {
    if ($e->class != 'type:slideshow' 
	&& $e->class != 'type:primaryImage') {
      $e->class = NULL;
    }
  }
  foreach ($html->find('[style]') as $e) {
    $e->style = NULL;
  }

  $processed_value = $html->save();
  $variables['elements'][0]['key'] = 'content:encoded';
  $variables['elements'][0]['value'] = $processed_value;
}

/**
 * Preprocess function for item <author> element.
 */
function views_rss_facebook_preprocess_item_custom_author(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  $variables['elements'][0]['key'] = 'author';
  $default_author = 'horki.info';
  $max_length = 60;

  // Process content
  $html = new simple_html_dom();
  $html->load($variables['elements'][0]['value']);
  // Extract author name from content
  $author_html = $html->find('h3[class=text-signature]', -1);
  if (!isset($author_html)) {
    $variables['elements'][0]['value'] = $default_author;
    return;
  }
  $author = $author_html->plaintext;
  if (mb_strlen($author) > $max_length) {
    // Seems like not an author name
    $variables['elements'][0]['value'] = $default_author;
    return;
  }
  $variables['elements'][0]['value'] = $author;
}

function views_rss_facebook_encode(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  $variables['elements'][0]['encoded'] = TRUE;
  $variables['elements'][0]['value'] = $variables['elements'][0]['value'];
}
