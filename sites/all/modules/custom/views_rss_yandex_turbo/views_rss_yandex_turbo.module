<?php

/**
 * @file
 * Provides Yandex.Turbo namespace and <item> elements for Views RSS module.
 */

/**
 * Implements hook_views_rss_namespaces().
 */
function views_rss_yandex_turbo_views_rss_namespaces() {
  $namespaces['turbo'] = array(
    'prefix' => 'xmlns',
    'uri' => 'http://turbo.yandex.ru',
  );

  return $namespaces;
}

/**
 * Implements hook_views_rss_item_elements().
 */
function views_rss_yandex_turbo_views_rss_item_elements() {
  $elements['turbo:source'] = array(
    'description' => t('Content URL to use in Yandex.Metrics.'),
    'help' => 'https://yandex.ru/dev/turbo/doc/rss/markup-docpage/',
  );
  $elements['turbo:topic'] = array(
    'description' => t('Content title to use in Yandex.Metrics.'),
    'help' => 'https://yandex.ru/dev/turbo/doc/rss/markup-docpage/',
  );
  $elements['turbo:content'] = array(
    'description' => t('An entity encoded element for HTML content.'),
    'help' => 'https://yandex.ru/dev/turbo/doc/rss/markup-docpage/',
    'preprocess functions' => array(
      'views_rss_yandex_turbo_preprocess_item_turbo_content_gallery',
      'views_rss_yandex_turbo_preprocess_item_turbo_content',
      'views_rss_custom_rewrite_absolute_paths',
      'views_rss_custom_encode',
    ),
  );
  return $elements;
}

/**
 * Preprocess function for item <turbo:content> element with the big number of images.
 */
function views_rss_yandex_turbo_preprocess_item_turbo_content_gallery(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  // Process content
  $html = new simple_html_dom();
  $html->load($variables['elements'][0]['value']);

  // Check, if there are enough images to form a gallery
  $min_img_num = 9;
  $imgs = $html->find('p img');
  $img_num = count($imgs);
  if ($img_num < $min_img_num) {
    return;
  }

  $first_gallery_img_idx = 0;
  $last_gallery_img_idx = 0;

  $first_img_idx = 0;
  while ($first_img_idx < $img_num) {
    $first_p = $imgs[$first_img_idx]->parent;
    if (sizeof($first_p->children) != 1) {      
      // skip if <img> is not the only child of <p>
      $first_img_idx++;
      continue;
    }
    
    $last_p = $first_p;
    $p_offset = 0;
    while (true) {
      $last_p_sibling = $last_p->next_sibling();

      if (!isset($last_p_sibling) || $last_p_sibling->tag != 'p') {
	// skip if the sibling tag is not <p>
	break;
      }
      $last_p_sibling_children = $last_p_sibling->children;
      if (sizeof($last_p_sibling_children) != 1) {
	// skip if there are more than one children of sibling <p>
	break;
      }
      if ($last_p_sibling_children[0]->tag != 'img') {
	// skip if <img> is not the only child of sibling <p>
	break;
      }

      $last_p = $last_p_sibling;
      $p_offset++;
    }

    if ($p_offset < $min_img_num) {
      // skip if there are less than $min_img_num neghbour <p><img> tags
      $first_img_idx += $p_offset + 1;
      continue;
    }

    // process captured <p><img> tags
    $gallery_header = '';
    for ($p_idx = 0, $p = $first_p; $p_idx < $p_offset; $p_idx++, $p = $p->next_sibling()) {
      $img = $p->children(0);
      $img_title = $img->title;
      if (!isset($img_title)) {
	continue;
      }
      $img->title = NULL;
      if (empty($img_title)) {
	continue;
      }
      // populate gallery title value, if not set yet
      if (empty($gallery_header)) {
	$gallery_header = '<header>' . $img_title . '</header>';
      }
    }    
    for ($p_idx = 1, $p = $first_p->next_sibling(); $p_idx < $p_offset; $p_idx++, $p = $p->next_sibling()) {
      $p->outertext = $p->innertext;
    }
    $first_p->outertext = '<div data-block="gallery">' . $gallery_header . $first_p->innertext;
    $last_p->outertext = $last_p->innertext . '</div>';

    $first_img_idx += $p_offset + 1;
  }

  $processed_value = $html->save();
  $variables['elements'][0]['value'] = $processed_value;
}

/**
 * Preprocess function for item <turbo:content> element.
 */
function views_rss_yandex_turbo_preprocess_item_turbo_content(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  // Process content
  $html = new simple_html_dom();
  $html->load($variables['elements'][0]['value']);
  // Process images
  foreach ($html->find('img') as $idx => $img) {
    $img->width = NULL;
    $img->height = NULL;
    $img->alt = NULL;
    $img->style = NULL;
    $img->removeAttribute('data-picture-mapping');
    // Replace src with srcset, if not set
    if (isset($img->srcset) && !isset($img->src)) {
      $img->src = explode(' ', $img->srcset, 2)[0];
      $img->srcset = NULL;
    }
    // Drop ?itok=... suffix from src
    $img_src_itok_pos = strrpos($img->src, '?itok=');
    if ($img_src_itok_pos) {
      $img->src = substr($img->src, 0, $img_src_itok_pos);
    }
    // Fixup title
    if (isset($img->title)) {
      $title = $img->title;
      $img->title = NULL;
      if (!empty($title)) {
	$img->outertext = '<figure>' . $img->outertext . '<figcaption>' . $title . '</figcaption>' . '</figure>';
      }
    }
  }
  // Remove author signature
  $author = $html->find('h3[class=text-signature]', -1);
  if (isset($author)) {
    $author->outertext = '';
  }
  // Remove all unneeded attributes
  foreach ($html->find('[id]') as $e) {
    $e->id = NULL;
  }
  foreach ($html->find('[class]') as $e) {
    $e->class = NULL;
  }
  foreach ($html->find('[style]') as $e) {
    $e->style = NULL;
  }

  // setup banners
  $top_banner = '<figure data-turbo-ad-id="content-top"></figure>';
  $bottom_banner = '<figure data-turbo-ad-id="content-bottom"></figure>';
  $header = $html->find('header', 0);
  if (isset($header)) {
    // put content banner after header
    $header->outertext = $header->outertext . $top_banner;
  } else {
    // put content banner on top of content
    $html->outertext = $top_banner . $html->outertext;
  }
  $processed_value = $html->save() . $bottom_banner;

  $variables['elements'][0]['key'] = 'turbo:content';
  $variables['elements'][0]['value'] = $processed_value;
}
