<?php

/**
 * @file
 * Provides Yandex.Turbo namespace and <item> elements for Views RSS module.
 */

/**
 * Implements hook_views_rss_namespaces().
 */
function views_rss_yandex_turbo_views_rss_namespaces() {
  $namespaces['turbo'] = array(
    'prefix' => 'xmlns',
    'uri' => 'http://turbo.yandex.ru',
  );

  return $namespaces;
}

/**
 * Implements hook_views_rss_item_elements().
 */
function views_rss_yandex_turbo_views_rss_item_elements() {
  $elements['turbo:source'] = array(
    'description' => t('Content URL to use in Yandex.Metrics.'),
    'help' => 'https://yandex.ru/dev/turbo/doc/rss/markup-docpage/',
  );
  $elements['turbo:topic'] = array(
    'description' => t('Content title to use in Yandex.Metrics.'),
    'help' => 'https://yandex.ru/dev/turbo/doc/rss/markup-docpage/',
  );
  $elements['turbo:content'] = array(
    'description' => t('An entity encoded element for HTML content.'),
    'help' => 'https://yandex.ru/dev/turbo/doc/rss/markup-docpage/',
    'preprocess functions' => array(
      'views_rss_yandex_turbo_preprocess_item_turbo_content',
      'views_rss_yandex_turbo_rewrite_absolute_paths',
      'views_rss_custom_rewrite_absolute_paths',
    ),
  );
  $elements['turbo:content_gallery'] = array(
    'description' => t('An entity encoded element for HTML gallery content.'),
    'help' => 'https://yandex.ru/dev/turbo/doc/rss/markup-docpage/',
    'preprocess functions' => array(
      'views_rss_yandex_turbo_preprocess_item_turbo_content',
      'views_rss_yandex_turbo_preprocess_item_turbo_content_gallery',
      'views_rss_custom_rewrite_absolute_paths',
      'views_rss_rewrite_relative_paths',
    ),
  );

  return $elements;
}

/**
 * Preprocess function for item <turbo:content> element.
 */
function views_rss_yandex_turbo_preprocess_item_turbo_content(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  // Process content
  $html = new simple_html_dom();
  $html->load($variables['elements'][0]['value']);
  // Process images
  foreach ($html->find('img') as $idx => $img) {
    $img->width = NULL;
    $img->height = NULL;
    $img->alt = NULL;
    $img->style = NULL;
    $img->removeAttribute('data-picture-mapping');
    // Replace src with srcset, if not set
    if (isset($img->srcset) && !isset($img->src)) {
      $img->src = explode(' ', $img->srcset, 2)[0];
      $img->srcset = NULL;
    }
    if (isset($img->title)) {
      $title = $img->title;
      $img->title = NULL;
      if (!empty($title)) {
	$img->outertext = '<figure>' . $img->outertext . '<figcaption>' . $title . '</figcaption>' . '</figure>';
      }
    }
  }
  // Remove author signature
  $author = $html->find('h3[class=text-signature]', -1);
  if (isset($author)) {
    $author->outertext = '';
  }
  // Remove all unneeded attributes
  foreach ($html->find('[id]') as $e) {
    $e->id = NULL;
  }
  foreach ($html->find('[class]') as $e) {
    $e->class = NULL;
  }
  foreach ($html->find('[style]') as $e) {
    $e->style = NULL;
  }

  // setup banners
  $top_banner = '<figure data-turbo-ad-id="content-top"></figure>';
  $bottom_banner = '<figure data-turbo-ad-id="content-bottom"></figure>';
  $header = $html->find('header', 0);
  if (isset($header)) {
    // put content banner after header
    $header->outertext = $header->outertext . $top_banner;
  } else {
    // put content banner on top of content
    $html->outertext = $top_banner . $html->outertext;
  }
  $processed_value = $html->save() . $bottom_banner;

  $variables['elements'][0]['key'] = 'turbo:content';
  $variables['elements'][0]['value'] = '<![CDATA[' . $processed_value . ']]>';
  $variables['elements'][0]['encoded'] = TRUE;
}

/**
 * Preprocess function for item <turbo:content> element with large number of images.
 */
function views_rss_yandex_turbo_preprocess_item_turbo_content_gallery(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  // Process content
  $html = new simple_html_dom();
  $html->load($variables['elements'][0]['value']);

  /* $base_img_idx = 0; */
  /* while (true) { */
  /*   $base_img = $html->find('p img', $base_img_idx); */
  /*   if (!isset($base_img)) { */
  /*     // reached the end of html */
  /*     break; */
  /*   } */
  /*   $base_p = $base_img->parent(); */
  /*   if (count($base_p->children) > 1) { */
  /*     // there are some other tags besides <img> in the base <p> */
  /*     continue; */
  /*   }  */
  /*   $next = $base_p->next_sibling(); */
  /*   if (!isset($next)) { */
  /*     // reached the end of html */
  /*     break; */
  /*   } */
  /*   if ($next->tag != 'p') { */
  /*     // sibling is not a <p> tag */
  /*     continue; */
  /*   } */
  /*   $next_p = $next; */
  /*   $next_img = $next_p->find('img', 0); */
  /*   if (!isset($next_img)) { */
  /*     // there is no <img> tag inside sibling <p> */
  /*     continue; */
  /*   } */
  /*   if (count($next_p->children) > 1) { */
  /*     // there are some other tags besides <img> in the sibling <p> */
  /*     continue; */
  /*   } */
  /*   $base_p->outertext = '<div data-block="gallery">' . $base_img . '</div>'; */
  /*   //if ($next_p-> */


  /*   /\* while (isset($sibling) && $sibling->tag == 'p' && $sibling) { *\/ */
  /*   /\*   $sibling = $sibling->next_sibling(); *\/ */
  /*   /\* } *\/ */
  /*   $base_img_idx++; */
  /* } */

  $processed_value = $html->save();

  $variables['elements'][0]['key'] = 'turbo:content';
  $variables['elements'][0]['value'] = '<![CDATA[' . $processed_value . ']]>';
  $variables['elements'][0]['encoded'] = TRUE;
}
