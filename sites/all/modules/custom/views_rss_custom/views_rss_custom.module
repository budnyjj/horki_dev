<?php

/**
 * @file
 * Provides custom <item> elements for Views RSS module.
 */

/**
 * Implements hook_views_rss_item_elements().
 */
function views_rss_custom_views_rss_item_elements() {
  $elements['custom:author'] = array(
    'description' => t('An HTML with h3 class="text-signature" element to extract the author name from.'),
    'preprocess functions' => array('views_rss_custom_preprocess_item_custom_author'),
  );
  $elements['custom:description'] = array(
    'description' => t('A trimmed text or summary to extract the description from.'),
    'preprocess functions' => array(
      'views_rss_custom_preprocess_item_custom_description',
      'views_rss_custom_encode',
    ),
  );
  return $elements;
}

/**
 * Preprocess function for item <author> element.
 */
function views_rss_custom_preprocess_item_custom_author(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  $max_length = 60;

  // Process content
  $html = new simple_html_dom();
  $html->load($variables['elements'][0]['value']);
  // Extract author name from content
  $author_html = $html->find('h3[class=text-signature]', -1);
  if (!isset($author_html)) {
    $variables['elements'][0]['value'] = NULL;
    return;
  }
  $author = $author_html->plaintext;
  if (mb_strlen($author) > $max_length) {
    // Seems like not an author name
    $variables['elements'][0]['value'] = NULL;
    return;
  }
  $variables['elements'][0]['key'] = 'author';
  $variables['elements'][0]['value'] = $author;
}

/**
 * Preprocess function for item <description> element.
 */
function views_rss_custom_preprocess_item_custom_description(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  $min_length = 120;

  // Process content
  $value = $variables['elements'][0]['value'];
  $processed_value = NULL;
  if (mb_strlen($value) < $min_length) {
    $processed_value = $value;
  }

  $pos = mb_strpos($value, '.', $min_length);
  if ($pos) {
    $processed_value = mb_substr($value, 0, $pos + 1);
  }

  $pos = mb_strrpos($value, '.');
  if ($pos) {
    $processed_value = mb_substr($value, 0, $pos + 1);
  }

  $variables['elements'][0]['key'] = 'description';
  $variables['elements'][0]['value'] = $processed_value;
}

function views_rss_custom_encode(&$variables) {
  // No value = no preprocessing.
  if (empty($variables['elements'][0]['value'])) {
    return;
  }

  $variables['elements'][0]['value'] = '<![CDATA[' . $variables['elements'][0]['value'] . ']]>';
  $variables['elements'][0]['encoded'] = TRUE;
}

/**
 * Preprocess callback.
 * Replaces absolute with leading '/' paths in element values with absolute URLs.
 * Based on views_rss_rewrite_relative_paths from views_rss module.
 */
function views_rss_custom_rewrite_absolute_paths(&$variables) {
  // Rewriting relative paths should be enabled by default,
  // so rewrite relative paths even if option value is not set.
  if (
    !isset($variables['view']->style_plugin->options['feed_settings']['absolute_paths'])
    || !empty($variables['view']->style_plugin->options['feed_settings']['absolute_paths'])
  ) {
    global $base_path;
    foreach ($variables['elements'] as $delta => $element) {
      if (isset($element['value'])) {
        // Value is an array, so this is a set of subelements.
        if (is_array($element['value'])) {
          views_rss_rewrite_relative_paths($variables['elements'][$delta]['value']);
        }
        // Value is a string, so just process it.
        else {
	  $quoted_slash = preg_quote($base_path, '/');
          $pattern = '/(src|href)=(\'|")' 
	      . $quoted_slash
	      . '([^' . $quoted_slash . '])'
              . '/';
          $replacement = '$1=$2' 
              . url('<front>', array('absolute' => TRUE))
	      . '$3';
          $variables['elements'][$delta]['value'] = preg_replace($pattern, $replacement, $element['value']);
        }
      }
    }
  }
}
